<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Corner House at UT</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2021-11-24T19:11:00-06:00</updated><entry><title>Solder Reflow Oven 2.0</title><link href="/solder-reflow-oven-20.html" rel="alternate"></link><published>2021-11-24T19:11:00-06:00</published><updated>2021-11-24T19:11:00-06:00</updated><author><name>AudiTT</name></author><id>tag:None,2021-11-24:/solder-reflow-oven-20.html</id><summary type="html">&lt;p&gt;This post details how to build a Solder Reflow Oven controller based on PID&lt;/p&gt;</summary><content type="html">&lt;p&gt;Found some time to work on hobby projects for thanksgiving break and seeing that I 
had to limit myself to using IC packages with extended leads due to lack of a way to 
soldering them, I decided on building a Solder Reflow Oven 2.0 !&lt;/p&gt;
&lt;p&gt;The first version was built around an AT90USB646, it worked fine but it used a separate
12V dc adapter to power the board. This time around I wanted to power the board and the
reflow oven from the mains and also add some TFT LCD tech to make it more rad!! This version uses
an STM32L053 mcu based on ARM Cortex M0+. Well, thats all the motivation/excuse I needed to build Solder Reflow Oven 2.0&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/SolderReflow_3D.png" width="800" height="600" /&gt;&lt;/p&gt;
&lt;h3&gt; Power Supply &lt;/h3&gt;

&lt;p&gt;I did not want to deal with multiple wires coming in and out of the oven so I decided to power the board from the mains. This meant incorporating
an AC to DC (3.3V) stage. The stage consists of a rectifier implemented using a diode-bridge, before rectifying I step down the voltage from 115V to
24V so that I can use components (diodes, capacitors) rated at lower voltages which makes the entire build cheaper.  &lt;/p&gt;
&lt;p&gt;&lt;img src="/images/powerStage.png" width="800" height="600" /&gt;&lt;/p&gt;
&lt;p&gt;On applying the stepped down AC to the diode bridge, we obtain a pulsating DC at the output. To smooth this pulsating DC we can use a large capacitor. Once
the capacitor fully charges to peak value of the pulsating DC, it can practically supply charge with minimal drop in its voltage till it charges again. This helps remove
ripple and produce a constant DC voltage. The output of the ripple smoothing capacitor is then input to a 10V regulator to obtain a 10V stable output.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/R2R_3_3V.png" width="800" height="600" /&gt;&lt;/p&gt;
&lt;p&gt;I then use a R2R divider to obtain 3.3V from the 10V rectifier output. Although this is not the most efficient way to do it, this isn't much of a problem at low 
voltages or power. We would have needed a buck converter if the power involved was higher to improve efficiency of the conversion from 10V to 3.3V.&lt;/p&gt;
&lt;h3&gt; Crystal Layout &lt;/h3&gt;

&lt;h3&gt; Bill of Materials &lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Component&lt;/th&gt;
&lt;th align="center"&gt;Quantity&lt;/th&gt;
&lt;th align="center"&gt;Total Cost&lt;/th&gt;
&lt;th align="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/511-STM32L053R6T6"&gt;511-STM32L053R6T6&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;$5.32&lt;/td&gt;
&lt;td align="left"&gt;ARM Microcontrollers - MCU ARM Microcontrollers - MCU 16/32-BITS MICROS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/947-RCLAMP0502A.TCT"&gt;947-RCLAMP0502A.TCT&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$1.82&lt;/td&gt;
&lt;td align="left"&gt;ESD Suppressors / TVS Diodes ESD Suppressors / TVS Diodes Low Capacitance TVS Array, 5V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/863-2SD1805F-TL-E"&gt;863-2SD1805F-TL-E&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;$2.91&lt;/td&gt;
&lt;td align="left"&gt;Bipolar Transistors - BJT Bipolar Transistors - BJT BIP NPN 5A 20V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/700-MAX31855KASA%2bT"&gt;700-MAX31855KASA+T&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;$5.38&lt;/td&gt;
&lt;td align="left"&gt;Sensor Interface Sensor Interface Cold-Junction Compensated Thermocouple-to-Digital Converter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/750-CDBHD140L-G"&gt;750-CDBHD140L-G&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$3.30&lt;/td&gt;
&lt;td align="left"&gt;Bridge Rectifiers Bridge Rectifiers LOW VF 1A 40V Schottky Bridge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/621-AZ1117R-3.3TRE1"&gt;621-AZ1117R-3.3TRE1&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$1.10&lt;/td&gt;
&lt;td align="left"&gt;LDO Voltage Regulators LDO Voltage Regulators LDO BJT HiCurr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/649-67996-400HLF"&gt;649-67996-400HLF&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;50&lt;/td&gt;
&lt;td align="center"&gt;$1.70&lt;/td&gt;
&lt;td align="left"&gt;Headers &amp;amp; Wire Housings Headers &amp;amp; Wire Housings .100CC STR HEADER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/612-LL3301NF065QG"&gt;612-LL3301NF065QG&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$1.20&lt;/td&gt;
&lt;td align="left"&gt;Pushbutton Switches Pushbutton Switches 50mA 12VDC F065 4.3mm Gull Wing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/640-FFC2B28-24-G"&gt;640-FFC2B28-24-G&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;$1.98&lt;/td&gt;
&lt;td align="left"&gt;FFC &amp;amp; FPC Connectors FFC &amp;amp; FPC Connectors 24W,0.5mm FFC Con,R/A,Dual Cont,B/Flp,H1.0mm,Gld,SMT,T&amp;amp;R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/710-150060VS75000"&gt;710-150060VS75000&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;20&lt;/td&gt;
&lt;td align="center"&gt;$2.80&lt;/td&gt;
&lt;td align="left"&gt;Standard LEDs - SMD Standard LEDs - SMD WL-SMCW SMDMono TpVw Waterclr 0603 BrtGrn&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/81-GRM0335C1H180FA1D"&gt;81-GRM0335C1H180FA1D&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;$0.50&lt;/td&gt;
&lt;td align="left"&gt;Multilayer Ceramic Capacitors MLCC - SMD/SMT Multilayer Ceramic Capacitors MLCC - SMD/SMT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/603-CC0402KPX58BB104"&gt;603-CC0402KPX58BB104&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;$0.43&lt;/td&gt;
&lt;td align="left"&gt;Multilayer Ceramic Capacitors MLCC - SMD/SMT Multilayer Ceramic Capacitors MLCC - SMD/SMT 25V 0.1uF X5R 0402 10%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/963-EMK107BJ105KAHT"&gt;963-EMK107BJ105KAHT&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;$0.37&lt;/td&gt;
&lt;td align="left"&gt;Multilayer Ceramic Capacitors MLCC - SMD/SMT Multilayer Ceramic Capacitors MLCC - SMD/SMT 0603 16VDC 1uF 10% X5R AEC-Q200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/963-UMK325ABJ106MMHT"&gt;963-UMK325ABJ106MMHT&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;$5.09&lt;/td&gt;
&lt;td align="left"&gt;Multilayer Ceramic Capacitors MLCC - SMD/SMT Multilayer Ceramic Capacitors MLCC - SMD/SMT 1210 50VDC 10uF 20% X5R AEC-Q200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/660-RN731JTTD6570D25"&gt;660-RN731JTTD6570D25&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$0.62&lt;/td&gt;
&lt;td align="left"&gt;Thin Film Resistors - SMD Thin Film Resistors - SMD 0603 657 Ohms 0.5% 25PPM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/279-CPF-A-0603B1K0E"&gt;279-CPF-A-0603B1K0E&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;$2.04&lt;/td&gt;
&lt;td align="left"&gt;Thin Film Resistors - SMD Thin Film Resistors - SMD CPF A 0603 1K0 0.1% 25PPM 5K RL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/815-ABM824MHZD1GT"&gt;815-ABM824MHZD1GT&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$1.24&lt;/td&gt;
&lt;td align="left"&gt;Crystals Crystals CRYSTAL 24.0000MHZ 18PF SMD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/810-MMZ1005S601HTD25"&gt;810-MMZ1005S601HTD25&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;$0.83&lt;/td&gt;
&lt;td align="left"&gt;Ferrite Beads Ferrite Beads 600ohm 25% 440mA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/474-SEN-13715"&gt;474-SEN-13715&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;$5.00&lt;/td&gt;
&lt;td align="left"&gt;SparkFun Accessories SparkFun Accessories Thermocouple Type-K - Stainless Steel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/553-F24-100-C2"&gt;553-F24-100-C2&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;$5.16&lt;/td&gt;
&lt;td align="left"&gt;Power Transformers Power Transformers POWER XFMR 24 Vct @ 100 mA UL/cUL - Class 2/3, 115V SPLIT PACK PCB MOUNT / F24-100-C2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/661-EMHS500GRA471MKG"&gt;661-EMHS500GRA471MKG&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$3.30&lt;/td&gt;
&lt;td align="left"&gt;Aluminum Electrolytic Capacitors - SMD Aluminum Electrolytic Capacitors - SMD 470uF 20% 50V AEC-Q200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/926-LM2940IMPX10NOPB"&gt;926-LM2940IMPX10NOPB&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;$7.96&lt;/td&gt;
&lt;td align="left"&gt;LDO Voltage Regulators LDO Voltage Regulators 1-A, 26-V, high-PSRR, low-dropout voltage regulator 4-SOT-223 -40 to 85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/649-1012938090202ALF"&gt;649-1012938090202ALF&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;50&lt;/td&gt;
&lt;td align="center"&gt;$1.90&lt;/td&gt;
&lt;td align="left"&gt;Headers &amp;amp; Wire Housings Headers &amp;amp; Wire Housings ECONOSTIK HEADER SR VT SMT 1X2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/651-1935161"&gt;651-1935161&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$0.98&lt;/td&gt;
&lt;td align="left"&gt;Fixed Terminal Blocks Fixed Terminal Blocks PT 1.5/2-5.0-H&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/485-4520"&gt;485-4520&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;$12.50&lt;/td&gt;
&lt;td align="left"&gt;TFT Displays &amp;amp; Accessories TFT Displays &amp;amp; Accessories Adafruit 1.3 240x240 Wide Angle IPS TFT Display&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/992-MINI-SPDT-SW"&gt;992-MINI-SPDT-SW&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$3.96&lt;/td&gt;
&lt;td align="left"&gt;Slide Switches Slide Switches MINI SPDT SWITCH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/791-0201N8R0C500CT"&gt;791-0201N8R0C500CT&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="center"&gt;$0.50&lt;/td&gt;
&lt;td align="left"&gt;Multilayer Ceramic Capacitors MLCC - SMD/SMT Multilayer Ceramic Capacitors MLCC - SMD/SMT 8.0pF +-0.25pF 50V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/187-CL21B104KBCNFNC"&gt;187-CL21B104KBCNFNC&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;td align="center"&gt;$0.29&lt;/td&gt;
&lt;td align="left"&gt;Multilayer Ceramic Capacitors MLCC - SMD/SMT Multilayer Ceramic Capacitors MLCC - SMD/SMT 100nF+/-10% 50V X7R 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/963-TMK325B7226MM-PR"&gt;963-TMK325B7226MM-PR&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;$2.25&lt;/td&gt;
&lt;td align="left"&gt;Multilayer Ceramic Capacitors MLCC - SMD/SMT Multilayer Ceramic Capacitors MLCC - SMD/SMT 1210 25VDC 22uF 20% X7R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/652-CRT0603BY2610ELF"&gt;652-CRT0603BY2610ELF&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;$1.00&lt;/td&gt;
&lt;td align="left"&gt;Thin Film Resistors - SMD Thin Film Resistors - SMD CHIP RESISTOR Precision&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/279-CPF0603D10KE"&gt;279-CPF0603D10KE&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;$1.08&lt;/td&gt;
&lt;td align="left"&gt;Thin Film Resistors - SMD Thin Film Resistors - SMD CPF0603 10K 0.5% 25PPM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://www.mouser.com//ProductDetail/667-ERA-3VEB2001V"&gt;667-ERA-3VEB2001V&lt;/a&gt;&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;$1.74&lt;/td&gt;
&lt;td align="left"&gt;Thin Film Resistors - SMD Thin Film Resistors - SMD 0603 0.1% 2Kohm 25ppm SMD&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="PID Control System"></category></entry><entry><title>Building an S-Band Radar</title><link href="/building-an-s-band-radar.html" rel="alternate"></link><published>2021-11-06T19:11:00-05:00</published><updated>2021-11-06T19:11:00-05:00</updated><author><name>AudiTT</name></author><id>tag:None,2021-11-06:/building-an-s-band-radar.html</id><summary type="html">&lt;p&gt;This post details how to build an  S-Band Ground Penetrating Radar&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post details my second and perhaps a more in-depth attempt at building an S-Band Ground Penetrating Radar. So lets jump right in ! &lt;/p&gt;
&lt;h3&gt; What is the S-Band and why choose it ? &lt;/h3&gt;

&lt;p&gt;Electromagnetic waves are capable of existing with various frequencies and this entire range of frequency is called a spectrum. EM waves have been harnesed to serve
several different purposes, from Communication to Remote Sensing and down to heating our foods ! We certainly cannot have someone microwaving their broccoli jeopardising
the radio communication with a space shuttle for instance. Hence, to maximize the potential of EM wave utility, we need to &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Allocate certaing range of frequencies called bands for specific operations&lt;/li&gt;
&lt;li&gt;Share the band by following the max transmit power statutes  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The establishment of such laws and regulations gives the governing body a legal basis to prosecute any malfeasance while simultaneously preventing interference amongst users.
The laws and regulations concerning the allocation and usage of the EM spectrum in the United States is set by the FCC. The S-Band is one such range of frequencies covering
2-4GHz. Operations such as Satellite Communciations, WiFi and microwave ovens etc utilize this band. In this project, we restrict ourselves to the ISM band 2.4 - 2.4835GHz
portion of the S-Band.&lt;/p&gt;
&lt;p&gt;In summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We operate in the ISM band of the S-Band 2.4-2.4835GHz&lt;/li&gt;
&lt;li&gt;Mass production of commercial devices for Wifi applications utilizing this band helps reduce the cost of our build&lt;/li&gt;
&lt;li&gt;Does not require licensing from FCC as long as we abide by the rules in &amp;sect; 15.249 of Title 47 of Code of Federal Regulations    &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt; Functional Diagram &lt;/h3&gt;

&lt;p&gt;&lt;img alt="thumbnail" height="450px" src="/blockDiagram.png"&gt;&lt;/p&gt;
&lt;p&gt;The functional diagram of our build is presented above. All images used are representational and attributions to the respective authors can be found at the bottom of this page.
At the highest level of abstraction, our GPR is made up of the PC, GPR controller board and the transmit and receive antennas. &lt;/p&gt;
&lt;p&gt;Functions of the PC&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upload firmware to the GPR controller MCU&lt;/li&gt;
&lt;li&gt;Obtain data from GPR controller MCU for analysis&lt;/li&gt;
&lt;li&gt;Supply power to the GPR controller&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Functions of the GPR Controller Board&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Digitize the range information and transfer it to the PC&lt;/li&gt;
&lt;li&gt;Generate an FMCW sweep/chirp of desired frequency range and resolution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Functions of the Antenna&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Transmit the FMCW signal from the GPR controller board&lt;/li&gt;
&lt;li&gt;Receive the reflected signal and transfer it to the GPR controller board&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt; GPR Controller Board &lt;/h3&gt;

&lt;p&gt;The major constraint in choosing the parts for the board is packaging of the IC. Since I don't have a solder reflow oven, I cannot solder packages without leads.&lt;/p&gt;
&lt;h4&gt; USB to UART/SPI &lt;/h4&gt;

&lt;p&gt;MCP2210
&lt;h4&gt; DSP Microcontroller &lt;/h4&gt;
&lt;h4&gt; Fractional N PLL &lt;/h4&gt;
&lt;h4&gt; VCO &lt;/h4&gt;
&lt;h4&gt; Loop Filter &lt;/h4&gt;
&lt;h4&gt; Reference Oscillator &lt;/h4&gt;
&lt;h4&gt; Power Divider &lt;/h4&gt;
&lt;h4&gt; LNA &lt;/h4&gt;
&lt;h4&gt; Mixer &lt;/h4&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/1sand0s/Lc3B-Assembler"&gt;Github Link to the LC3b Assembler&lt;/a&gt;&lt;/p&gt;</content><category term="FMCW"></category></entry><entry><title>Building a stand-alone Assembler for the LC3b ISA</title><link href="/building-a-stand-alone-assembler-for-the-lc3b-isa.html" rel="alternate"></link><published>2020-01-06T19:11:00-06:00</published><updated>2020-01-06T19:11:00-06:00</updated><author><name>AudiTT</name></author><id>tag:None,2020-01-06:/building-a-stand-alone-assembler-for-the-lc3b-isa.html</id><summary type="html">&lt;p&gt;This post details how to build an assembler for the LC3b ISA. First of many assemblers to come, so stay tuned&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post details how to build an assembler in general but we'll take a look at the Lc3b ISA. &lt;/p&gt;
&lt;h3&gt; What is an Assembler &lt;/h3&gt;

&lt;p&gt;A computer program is essentially a sequence of instructions used to instruct the computer to perform a certain task. Since computers are built using digital logic blocks implemented through
CMOS technology, they can only understand 1's and 0's and therefore we need to remove all the layers of abstraction from a program before the computer can understand it. &lt;/p&gt;
&lt;h5&gt; What is Abstraction &lt;/h5&gt;

&lt;p&gt;Abstraction of a subject refers to the concept of exposing only the absolute essential traits or aspects of that subject that would allow a user to exploit its usefulness despite being
potentially ignorant of its underlying complexity. For instance, the entire mechanism of driving a car is reduced to being able to operate the steering wheel, the stick shift, the brake pad 
and the acceleration pad etc through abstraction without requiring the need to understand the complexity of the underlying parts such as the engine. It would not be an exaggeration to
claim that the world runs on abstraction. Every product we use, every product a company is hoping to market requires abstraction for it to be useful. &lt;/p&gt;
&lt;p&gt;Similarly, programming languages abstract away all the complexities associated with programming directly in the machine language. However, since the computer can only understand machine language,
 we need to remove this abstraction. The tool that removes the abstraction from an assembly language and thereby translating it to the logic equivalent machine language is called an assembler. &lt;/p&gt;
&lt;p&gt;&lt;img alt="thumbnail" height="350px" src="/assemblerAbstraction.png"&gt;&lt;/p&gt;
&lt;p&gt;In the figure above, we have a simple assembly program (ASM code) to add -1(Base 10) to the contents of the register R0 and store it in R0. The logic equivalent machine code is shown
on the right. The binary sequence has been written in Base 16 to improve readability. Some of the major functions of an assembler include&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Correctly translate ASM code to its logic equivalent machine code&lt;/li&gt;
&lt;li&gt;Detect errors in the ASM code if any and output the appropriate error code &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt; Structure of LC3b Assembly Language and Program &lt;/h3&gt;

&lt;p&gt;Every program written in LC3b assembly language has the following template&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    .ORIG Operand ; Operand is an even address
        .
        .
        .
    Instruction/Directive Operands
        .
        .
        .
    .END
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The .ORIG directive indicates the start of the program and the .END directive indicates the end. The .ORIG directive takes an even addres as an operand and indicates the address where the first
2 bytes of the program is stored. As stated before, the assembler's job is to translate the ASM code into machine code whilst also detecting any errors. Seems like an FSM based implementation
would be ideal for this task since by definition of the language specifications, we know all the possible errors an LC3b assembly program can generate which can be used to trigger transitions
into an error state in the FSM statespace. For instance, two .ORIG directives is illegal, odd operand to .ORIG is illegal, operand to .ORIG has to be a valid address whereas two .END is allowed
and despite .END not taking an operand, it is not illegal since anything following .END is strictly speaking not part of the program. Therefore, just considering the opening and closing
directives we can setup the following FSM to vet a program.&lt;/p&gt;
&lt;p&gt;&lt;img alt="thumbnail" height="350px" src="/fsmHigh.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="/fsmHigh.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="/assemblerAbstraction.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/1sand0s/Lc3B-Assembler"&gt;Github Link to the LC3b Assembler&lt;/a&gt;&lt;/p&gt;</content><category term="LC3b"></category><category term="C"></category></entry><entry><title>Designing SPI Master and Slave in Verilog (Synthesizable)</title><link href="/designing-spi-master-and-slave-in-verilog-synthesizable.html" rel="alternate"></link><published>2019-12-06T19:11:00-06:00</published><updated>2019-12-06T19:11:00-06:00</updated><author><name>AudiTT</name></author><id>tag:None,2019-12-06:/designing-spi-master-and-slave-in-verilog-synthesizable.html</id><summary type="html">&lt;p&gt;This post details how to design an SPI Master and Slave using Verilog. The design is implemented using FSM.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the previous post, we had a look at designing a general purpose board based on the popular AT89S51 MCU. We took advantage of the fact
that the &lt;strong&gt;S&lt;/strong&gt; variant of Atmel's 8051 series allows ISP(In-System programming) and hence we used an Arduino as the in-system programmer to 
burn code onto our board by means of the protocol SPI (Serial Peripheral Interface). In this post, I would like to detail what SPI is, how can
one design it in HDL(Hardware descriptive language) and upload our SPI module onto an FPGA and use that to program our 8051 board.&lt;/p&gt;
&lt;h3&gt; Brief Review of Intel HEX format &lt;/h3&gt;

&lt;p&gt;If you followed the previous 8051 tutorial, you'll remeber that we burned in a sample &lt;strong&gt;blinky.hex&lt;/strong&gt; program onto our 8051 board to make it blink
with an approximate delay of 1 second. The contents of the &lt;strong&gt;assembly file&lt;/strong&gt; are as given below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ORG&lt;/span&gt; &lt;span class="nt"&gt;0000H&lt;/span&gt;
        &lt;span class="nt"&gt;SJMP&lt;/span&gt; &lt;span class="nt"&gt;BLINKY&lt;/span&gt;

&lt;span class="nt"&gt;DELAY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;08H&lt;/span&gt;            &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;
&lt;span class="nt"&gt;DELAY2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;0FFH&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;
&lt;span class="nt"&gt;DELAY3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;0FFH&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;
&lt;span class="nt"&gt;AGAIN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;AGAIN&lt;/span&gt;          &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;
        &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;DELAY3&lt;/span&gt;         &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;
        &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;DELAY2&lt;/span&gt;         &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;
        &lt;span class="nt"&gt;RET&lt;/span&gt;                     &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;

&lt;span class="nt"&gt;BLINKY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;ACALL&lt;/span&gt; &lt;span class="nt"&gt;DELAY&lt;/span&gt;             &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;
        &lt;span class="nt"&gt;CPL&lt;/span&gt; &lt;span class="nt"&gt;P1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;4&lt;/span&gt;                &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;
        &lt;span class="nt"&gt;SJMP&lt;/span&gt; &lt;span class="nt"&gt;BLINKY&lt;/span&gt;             &lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;Delay&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;Machine&lt;/span&gt; &lt;span class="nt"&gt;Cycle&lt;/span&gt;


&lt;span class="nt"&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have commented the delay in number of machine cycles so that the reader can confirm that the blink period is indeed 1 second (you need to factor in the crystal frequency
of 24 MHz which results in each Machine cycle being 0.5u seconds). &lt;/p&gt;
&lt;p&gt;The mneumonics representing the instructions such as SJMP are in reality a HEX code/number. The assembler is 
responsible for translating an assembly program containing mneumonics to machine language file containing purely HEX codes. The HEX file contents can be understood by replacing our 
assembly language file mneumonic instruction line by line with the corresponding HEX code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ORG&lt;/span&gt; &lt;span class="nt"&gt;0000H&lt;/span&gt;                       &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;Address&lt;/span&gt;    &lt;span class="nt"&gt;HEX&lt;/span&gt; &lt;span class="nt"&gt;code&lt;/span&gt;    &lt;span class="nt"&gt;Reasoning&lt;/span&gt;
        &lt;span class="nt"&gt;SJMP&lt;/span&gt; &lt;span class="nt"&gt;BLINKY&lt;/span&gt;             &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;0000H&lt;/span&gt;      &lt;span class="nt"&gt;800DH&lt;/span&gt;       &lt;span class="nt"&gt;80&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;SJMP&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;0D&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;address&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;BLINKY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;000FH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;relative&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;PC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0002H&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;         

&lt;span class="nt"&gt;DELAY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;08H&lt;/span&gt;            &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;0002H&lt;/span&gt;      &lt;span class="nt"&gt;7808H&lt;/span&gt;       &lt;span class="nt"&gt;78&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R0&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;08&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;immediate&lt;/span&gt; &lt;span class="nt"&gt;operand&lt;/span&gt; &lt;span class="nt"&gt;08H&lt;/span&gt;
&lt;span class="nt"&gt;DELAY2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;0FFH&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;0004H&lt;/span&gt;      &lt;span class="nt"&gt;79FFH&lt;/span&gt;       &lt;span class="nt"&gt;79&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R1&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;FF&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;immidiate&lt;/span&gt; &lt;span class="nt"&gt;operand&lt;/span&gt; &lt;span class="nt"&gt;FFH&lt;/span&gt;
&lt;span class="nt"&gt;DELAY3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;0FFH&lt;/span&gt;           &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;0006H&lt;/span&gt;      &lt;span class="nt"&gt;7AFFH&lt;/span&gt;       &lt;span class="nt"&gt;7A&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;MOV&lt;/span&gt; &lt;span class="nt"&gt;R1&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;FF&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;immidiate&lt;/span&gt; &lt;span class="nt"&gt;operand&lt;/span&gt; &lt;span class="nt"&gt;FFH&lt;/span&gt;
&lt;span class="nt"&gt;AGAIN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;AGAIN&lt;/span&gt;          &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;0008H&lt;/span&gt;      &lt;span class="nt"&gt;DAFEH&lt;/span&gt;       &lt;span class="nt"&gt;DA&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R2&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;FE&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;address&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;AGAIN&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0008H&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;relative&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;PC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;000AH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;DELAY3&lt;/span&gt;         &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;000AH&lt;/span&gt;      &lt;span class="nt"&gt;D9FAH&lt;/span&gt;       &lt;span class="nt"&gt;D9&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R1&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;FA&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;address&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;DELAY3&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0006H&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;relative&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;PC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;000CH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;DELAY2&lt;/span&gt;         &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;000CH&lt;/span&gt;      &lt;span class="nt"&gt;D8F6H&lt;/span&gt;       &lt;span class="nt"&gt;D8&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;DJNZ&lt;/span&gt; &lt;span class="nt"&gt;R0&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;F6&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;address&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;DELAY2&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0004H&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;relative&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;PC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;000EH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nt"&gt;RET&lt;/span&gt;                     &lt;span class="o"&gt;;&lt;/span&gt;      &lt;span class="nt"&gt;0EH&lt;/span&gt;        &lt;span class="nt"&gt;22H&lt;/span&gt;       &lt;span class="nt"&gt;PC&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;loaded&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;SP&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0011H&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nt"&gt;BLINKY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;ACALL&lt;/span&gt; &lt;span class="nt"&gt;DELAY&lt;/span&gt;             &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;000FH&lt;/span&gt;      &lt;span class="nt"&gt;1102H&lt;/span&gt;       &lt;span class="nt"&gt;11&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;ACALL&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;02&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;address&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;DELAY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0002H&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nt"&gt;SP&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;loaded&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;PC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0011H&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nt"&gt;CPL&lt;/span&gt; &lt;span class="nt"&gt;P1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;4&lt;/span&gt;                &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;0011H&lt;/span&gt;      &lt;span class="nt"&gt;B294H&lt;/span&gt;       &lt;span class="nt"&gt;B2&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;CPL&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;94&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;address&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;Port&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;bit&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;
        &lt;span class="nt"&gt;SJMP&lt;/span&gt; &lt;span class="nt"&gt;BLINKY&lt;/span&gt;             &lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="nt"&gt;0013H&lt;/span&gt;      &lt;span class="nt"&gt;80FAH&lt;/span&gt;       &lt;span class="nt"&gt;80&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;SJMP&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;FA&lt;/span&gt; &lt;span class="nt"&gt;represents&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;address&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;BLINKY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;000FH&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;relative&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;PC&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0015H&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;


&lt;span class="nt"&gt;END&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The HEX file for the above program is as given below&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="/images/hexFormat.png"&gt;&lt;/p&gt;
&lt;p&gt;I have marked the nibbles according to what they represent&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Red nibbles represent the number of data bytes (black nibbles) in that line. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Green nibbles represent a 2 byte address which indicates where that particular line is going to be written in the PROM of 8051&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Black nibbles represent the data. If you notice carefully, this matches the HEX code we wrote down &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Orange nibbles represent whether that particular line has data bytes or if its end of file. 00 = data bytes and 01 = end of file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue nibbles represent the checksum for that line which is used to ensure integrity of the code burnt in&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt; Serial Peripheral Interface (SPI) &lt;/h3&gt;

&lt;p&gt;Now that we have seen the HEX file for our assembly program, it is this HEX file we are going to transfer to our 8051 byte by byte using SPI.
SPI is a full duplex (simultaneous transmit and receive) synchronous communication protocol. The signals required for SPI to work are &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SCK (Serial Clock)&lt;/li&gt;
&lt;li&gt;MISO (Master In Slave Out)&lt;/li&gt;
&lt;li&gt;MOSI (Master Out Slave In)&lt;/li&gt;
&lt;li&gt;SS (Slave Select)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SPI can have more than one slave but only one master.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;h5&gt; SCK &lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The master is responsible for generating the serial clock. The maximum frequency/baud rate is dictated by both the master and slave's
receive rate. For 8051, the max baud rate allowed is $\frac{1}{16}$th of crystal frequency. Since our crystal frequency is 24Mhz, the max baud rate is 1.5MHz.
The SCK is used to synchronize data transfers and initiate state changes in our FSM based SPI module.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;h5&gt; MISO &lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;MISO is the line on which the slave transmits data and the master receives data.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;h5&gt; MOSI &lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;MOSI is the line on which the master transmits data and the slave receives data.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;h5&gt; SS &lt;/h5&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Since SPI can have more than one slave, the SS is used to select a particular slave for communication. Since we are interested in using SPI for burning programs, we will
be dealing with a single slave and hence this signal is not relevant for us.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The transmit FSM&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/fsmTransmit.jpg" width="800" height="600" /&gt;&lt;/p&gt;
&lt;p&gt;and the receive FSM&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/fsmReceive.jpg" width="800" height="600" /&gt;&lt;/p&gt;
&lt;p&gt;The behavioural simulation of the verilog module is as follows&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/spiTransfer.png" width="800" height="400" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSPTXD is our MOSI&lt;/li&gt;
&lt;li&gt;SSPCLKOUT is our SCK&lt;/li&gt;
&lt;li&gt;PSEL is our SS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since PCLK is faster than SSPCLKOUT, I have added a FIFO buffer in the transmit module to prevent data loss. The FIFO
buffer depth can be varied. The SSPTXINTR signal indicates that the FIFO buffer is full and hence anymore data sent
to the transmit module to be written will be lost. PWDATA is the data to be written/sent whereas CLEAR_B is our reset
signal.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/1sand0s/SSP-Master-and-Slave-Verilog-Module"&gt;Github Link to the SPI/SSP verilog module&lt;/a&gt;&lt;/p&gt;</content><category term="SPI"></category><category term="Serial Interface"></category></entry><entry><title>Make your own 8051(AT89S51) Board</title><link href="/make-your-own-8051at89s51-board.html" rel="alternate"></link><published>2019-12-04T19:11:00-06:00</published><updated>2019-12-04T19:11:00-06:00</updated><author><name>AudiTT</name></author><id>tag:None,2019-12-04:/make-your-own-8051at89s51-board.html</id><summary type="html">&lt;p&gt;Short version of my first blog post&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had a week off for thanksgiving and thought it was worth the time to start designing some basic general puprose MCU boards
to build upon for more complex projects later on.&lt;/p&gt;
&lt;p&gt;The AT89S51 based off of Intel's famous MCS-51 instruction set is an 8-bit CISC microcontroller. Its fairly simple and so I
though of beginning my blog by detailing how to design a general purpose board centred on arguably its most popular variant 
AT89S51 (there are other variants supplied by Zilog, Philips etc).&lt;/p&gt;
&lt;p&gt;Its important that if you choose to use an 8051 from Atmel (Microchip) in your design that you go for the &lt;strong&gt;AT89S51&lt;/strong&gt; rather
than &lt;strong&gt;AT89C51&lt;/strong&gt; since the &lt;strong&gt;S&lt;/strong&gt; variant offers in-system programming (ISP) and hence allowing SPI and other protocols to be used 
to program the MCU without needing a dedicated programmer. &lt;/p&gt;
&lt;p&gt;The Kicad schematic for the board is explained below&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="/PowerSupply.PNG"&gt;&lt;/p&gt;
&lt;p&gt;The power supply for the MCU is made up of a voltage regulator &lt;strong&gt;MC78L05&lt;/strong&gt; which is capable of outputting 5V DC from an input
of 5V to 15V DC. I have added an additional 330uF bulk decoupling capacitor in case the MCU draws too much current during which
the low frequency ripple in the power supply line will be reduced by the bulk decoupling capacitor. Presently however, I haven't
found the need yet to include it but just in case.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="/Crystal.PNG"&gt;&lt;/p&gt;
&lt;p&gt;The oscilltor is the usual &lt;strong&gt;Pierce-type oscillator&lt;/strong&gt; employing a standard 24Mhz crystal from Abracon (through hole). The Abracon crystal
oscillator has a load capacitance of 18pF and hence the caps($C_p$) employed to match this impedance is given by the formula
$C_p = 2 * C_L - 2 * C_{stray}$&lt;/p&gt;
&lt;p&gt;I have ignored $C_{stray}$ the stray capacitance since I have placed the crystal very close to the XTAL pins of the MCU.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="/TestLED.PNG"&gt;&lt;/p&gt;
&lt;p&gt;As is customary, the Hello World equivalent of a hardware project is the LED blink test. D1 is the Power status LED whereas D2 is the test LED
and is connected to the fifth pin of Port 1. Before programming, the RST should be pulled high for 2 machine cycles to reset the MCU. To perform
this reset quickly, I have added a pushbutton SPST between RST and VCC.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="/MCU.PNG"&gt;&lt;/p&gt;
&lt;p&gt;The only interesting thing mentioning in MCU schematic is that the bypass capacitor 0.1uF has to be placed as close as possible to the VCC supply
pin of the MCU to ensure that the shortest path is available for the high frequency currents(ripples) to flow back to the source.
Essentially it decreases the parasitic inductance by reducing the loop area.&lt;/p&gt;
&lt;p&gt;The Unsoldered and the Soldered boards : Kudos to OSHPark &lt;/p&gt;
&lt;p&gt;&lt;img src="/images/UnSoldered.jpg" width="700" height="700" /&gt;    &lt;img src="/images/Soldered.jpg" width="700" height="700" /&gt;&lt;/p&gt;
&lt;p&gt;Lets take a quick look at the blink test before heading onto the programming intracacies.&lt;/p&gt;
&lt;iframe src="http://www.youtube.com/embed/fNMvQsAE2kg"
   width="600" height="400" frameborder="0" allowfullscreen&gt;
&lt;/iframe&gt;

&lt;p&gt;The usage of AT89S51 has emphasized before makes programming the board extremely simple. We are going to use SPI (Serial Peripheral Interface)
protocol. I had an Arduino Mega lying around and decided to use that as the ISP (In-system Programmer).&lt;/p&gt;
&lt;p&gt;These are the steps to be followed to program the 8051 board.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Upload the ArduinoISP code to the arduino you intend to use as the ISP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect MISO of Arduino to MISO of the 8051 board&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect MOSI of Arduino to MOSI of the 8051 board&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect SCK of Arduino to SCK of the 8051 board&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The maximum baud rate allowed is equal to $\frac{8051 Crystal Frequency}{16}$. I usually use 19200&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To simplify the avrdude upload process I have written a powershell script(runs only on Windows but can easily be ported).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the powershell script from my github repository and add the folder called Bootloader to your environment path variable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit the bootloader.ps1 file present inside the Bootloader folder such that $AVRDUDE_HOME points to the avr_dude.exe and $CONF_FILE points to 
   the config file for 8051 (F40R96CIUSLFZFP.conf). The config file is also present in the Bootloader directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proceed to the directory where your HEX file is present and upload it using powershell by executing the command &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                                      bootloader.ps1 COM3 19200 your_hex_file.hex
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detailed procedure can be found by executing the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                                      bootloader.ps1 -h
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the code has been successfully uploaded to the 8051, short the EA/VPP pin and the VCC pin to ensure that the code memory is read from internal
    ROM.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://github.com/1sand0s/AT89S51-8051-General-Purpose-Board"&gt;Github Link to the Powershell Scripts and Kicad Project&lt;/a&gt;&lt;/p&gt;</content><category term="AT89S51"></category><category term="8051 Board"></category></entry></feed>